// Code generated by "enumer -json -yaml -type=Type"; DO NOT EDIT.

package import_message

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "NoTypeInfoWarningError"

var _TypeIndex = [...]uint8{0, 6, 10, 17, 22}

const _TypeLowerName = "notypeinfowarningerror"

func (i Type) String() string {
	if i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[NoType-(0)]
	_ = x[Info-(1)]
	_ = x[Warning-(2)]
	_ = x[Error-(3)]
}

var _TypeValues = []Type{NoType, Info, Warning, Error}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:6]:        NoType,
	_TypeLowerName[0:6]:   NoType,
	_TypeName[6:10]:       Info,
	_TypeLowerName[6:10]:  Info,
	_TypeName[10:17]:      Warning,
	_TypeLowerName[10:17]: Warning,
	_TypeName[17:22]:      Error,
	_TypeLowerName[17:22]: Error,
}

var _TypeNames = []string{
	_TypeName[0:6],
	_TypeName[6:10],
	_TypeName[10:17],
	_TypeName[17:22],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Type
func (i Type) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Type
func (i *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TypeString(s)
	return err
}
