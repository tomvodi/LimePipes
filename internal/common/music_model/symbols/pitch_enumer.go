// Code generated by "enumer -json -yaml -type=Pitch"; DO NOT EDIT.

package symbols

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PitchName = "NoPitchLowGLowABCDEFHighGHighA"

var _PitchIndex = [...]uint8{0, 7, 11, 15, 16, 17, 18, 19, 20, 25, 30}

const _PitchLowerName = "nopitchlowglowabcdefhighghigha"

func (i Pitch) String() string {
	if i >= Pitch(len(_PitchIndex)-1) {
		return fmt.Sprintf("Pitch(%d)", i)
	}
	return _PitchName[_PitchIndex[i]:_PitchIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PitchNoOp() {
	var x [1]struct{}
	_ = x[NoPitch-(0)]
	_ = x[LowG-(1)]
	_ = x[LowA-(2)]
	_ = x[B-(3)]
	_ = x[C-(4)]
	_ = x[D-(5)]
	_ = x[E-(6)]
	_ = x[F-(7)]
	_ = x[HighG-(8)]
	_ = x[HighA-(9)]
}

var _PitchValues = []Pitch{NoPitch, LowG, LowA, B, C, D, E, F, HighG, HighA}

var _PitchNameToValueMap = map[string]Pitch{
	_PitchName[0:7]:        NoPitch,
	_PitchLowerName[0:7]:   NoPitch,
	_PitchName[7:11]:       LowG,
	_PitchLowerName[7:11]:  LowG,
	_PitchName[11:15]:      LowA,
	_PitchLowerName[11:15]: LowA,
	_PitchName[15:16]:      B,
	_PitchLowerName[15:16]: B,
	_PitchName[16:17]:      C,
	_PitchLowerName[16:17]: C,
	_PitchName[17:18]:      D,
	_PitchLowerName[17:18]: D,
	_PitchName[18:19]:      E,
	_PitchLowerName[18:19]: E,
	_PitchName[19:20]:      F,
	_PitchLowerName[19:20]: F,
	_PitchName[20:25]:      HighG,
	_PitchLowerName[20:25]: HighG,
	_PitchName[25:30]:      HighA,
	_PitchLowerName[25:30]: HighA,
}

var _PitchNames = []string{
	_PitchName[0:7],
	_PitchName[7:11],
	_PitchName[11:15],
	_PitchName[15:16],
	_PitchName[16:17],
	_PitchName[17:18],
	_PitchName[18:19],
	_PitchName[19:20],
	_PitchName[20:25],
	_PitchName[25:30],
}

// PitchString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PitchString(s string) (Pitch, error) {
	if val, ok := _PitchNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PitchNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pitch values", s)
}

// PitchValues returns all values of the enum
func PitchValues() []Pitch {
	return _PitchValues
}

// PitchStrings returns a slice of all String values of the enum
func PitchStrings() []string {
	strs := make([]string, len(_PitchNames))
	copy(strs, _PitchNames)
	return strs
}

// IsAPitch returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pitch) IsAPitch() bool {
	for _, v := range _PitchValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Pitch
func (i Pitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Pitch
func (i *Pitch) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Pitch should be a string, got %s", data)
	}

	var err error
	*i, err = PitchString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Pitch
func (i Pitch) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Pitch
func (i *Pitch) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PitchString(s)
	return err
}
