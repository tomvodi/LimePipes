// Code generated by "enumer -json -yaml -type=TimeLineType"; DO NOT EDIT.

package time_line

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TimeLineTypeName = "NoTypeFirstSinglingSecondDoublingSecondOf2SecondOf3SecondOf4SecondOf2And4SecondOf5SecondOf6SecondOf7SecondOf8BisIntro"

var _TimeLineTypeIndex = [...]uint8{0, 6, 11, 19, 25, 33, 42, 51, 60, 73, 82, 91, 100, 109, 112, 117}

const _TimeLineTypeLowerName = "notypefirstsinglingseconddoublingsecondof2secondof3secondof4secondof2and4secondof5secondof6secondof7secondof8bisintro"

func (i TimeLineType) String() string {
	if i >= TimeLineType(len(_TimeLineTypeIndex)-1) {
		return fmt.Sprintf("TimeLineType(%d)", i)
	}
	return _TimeLineTypeName[_TimeLineTypeIndex[i]:_TimeLineTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TimeLineTypeNoOp() {
	var x [1]struct{}
	_ = x[NoType-(0)]
	_ = x[First-(1)]
	_ = x[Singling-(2)]
	_ = x[Second-(3)]
	_ = x[Doubling-(4)]
	_ = x[SecondOf2-(5)]
	_ = x[SecondOf3-(6)]
	_ = x[SecondOf4-(7)]
	_ = x[SecondOf2And4-(8)]
	_ = x[SecondOf5-(9)]
	_ = x[SecondOf6-(10)]
	_ = x[SecondOf7-(11)]
	_ = x[SecondOf8-(12)]
	_ = x[Bis-(13)]
	_ = x[Intro-(14)]
}

var _TimeLineTypeValues = []TimeLineType{NoType, First, Singling, Second, Doubling, SecondOf2, SecondOf3, SecondOf4, SecondOf2And4, SecondOf5, SecondOf6, SecondOf7, SecondOf8, Bis, Intro}

var _TimeLineTypeNameToValueMap = map[string]TimeLineType{
	_TimeLineTypeName[0:6]:          NoType,
	_TimeLineTypeLowerName[0:6]:     NoType,
	_TimeLineTypeName[6:11]:         First,
	_TimeLineTypeLowerName[6:11]:    First,
	_TimeLineTypeName[11:19]:        Singling,
	_TimeLineTypeLowerName[11:19]:   Singling,
	_TimeLineTypeName[19:25]:        Second,
	_TimeLineTypeLowerName[19:25]:   Second,
	_TimeLineTypeName[25:33]:        Doubling,
	_TimeLineTypeLowerName[25:33]:   Doubling,
	_TimeLineTypeName[33:42]:        SecondOf2,
	_TimeLineTypeLowerName[33:42]:   SecondOf2,
	_TimeLineTypeName[42:51]:        SecondOf3,
	_TimeLineTypeLowerName[42:51]:   SecondOf3,
	_TimeLineTypeName[51:60]:        SecondOf4,
	_TimeLineTypeLowerName[51:60]:   SecondOf4,
	_TimeLineTypeName[60:73]:        SecondOf2And4,
	_TimeLineTypeLowerName[60:73]:   SecondOf2And4,
	_TimeLineTypeName[73:82]:        SecondOf5,
	_TimeLineTypeLowerName[73:82]:   SecondOf5,
	_TimeLineTypeName[82:91]:        SecondOf6,
	_TimeLineTypeLowerName[82:91]:   SecondOf6,
	_TimeLineTypeName[91:100]:       SecondOf7,
	_TimeLineTypeLowerName[91:100]:  SecondOf7,
	_TimeLineTypeName[100:109]:      SecondOf8,
	_TimeLineTypeLowerName[100:109]: SecondOf8,
	_TimeLineTypeName[109:112]:      Bis,
	_TimeLineTypeLowerName[109:112]: Bis,
	_TimeLineTypeName[112:117]:      Intro,
	_TimeLineTypeLowerName[112:117]: Intro,
}

var _TimeLineTypeNames = []string{
	_TimeLineTypeName[0:6],
	_TimeLineTypeName[6:11],
	_TimeLineTypeName[11:19],
	_TimeLineTypeName[19:25],
	_TimeLineTypeName[25:33],
	_TimeLineTypeName[33:42],
	_TimeLineTypeName[42:51],
	_TimeLineTypeName[51:60],
	_TimeLineTypeName[60:73],
	_TimeLineTypeName[73:82],
	_TimeLineTypeName[82:91],
	_TimeLineTypeName[91:100],
	_TimeLineTypeName[100:109],
	_TimeLineTypeName[109:112],
	_TimeLineTypeName[112:117],
}

// TimeLineTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TimeLineTypeString(s string) (TimeLineType, error) {
	if val, ok := _TimeLineTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TimeLineTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TimeLineType values", s)
}

// TimeLineTypeValues returns all values of the enum
func TimeLineTypeValues() []TimeLineType {
	return _TimeLineTypeValues
}

// TimeLineTypeStrings returns a slice of all String values of the enum
func TimeLineTypeStrings() []string {
	strs := make([]string, len(_TimeLineTypeNames))
	copy(strs, _TimeLineTypeNames)
	return strs
}

// IsATimeLineType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TimeLineType) IsATimeLineType() bool {
	for _, v := range _TimeLineTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TimeLineType
func (i TimeLineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TimeLineType
func (i *TimeLineType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TimeLineType should be a string, got %s", data)
	}

	var err error
	*i, err = TimeLineTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for TimeLineType
func (i TimeLineType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TimeLineType
func (i *TimeLineType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TimeLineTypeString(s)
	return err
}
