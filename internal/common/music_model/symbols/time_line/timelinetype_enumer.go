// Code generated by "enumer -json -yaml -type=TimeLineType"; DO NOT EDIT.

package time_line

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TimeLineTypeName = "NoTypeFirstSecondSecondOf2SecondOf3SecondOf4SecondOf2And4SecondOf5SecondOf6SecondOf7SecondOf8Intro"

var _TimeLineTypeIndex = [...]uint8{0, 6, 11, 17, 26, 35, 44, 57, 66, 75, 84, 93, 98}

const _TimeLineTypeLowerName = "notypefirstsecondsecondof2secondof3secondof4secondof2and4secondof5secondof6secondof7secondof8intro"

func (i TimeLineType) String() string {
	if i >= TimeLineType(len(_TimeLineTypeIndex)-1) {
		return fmt.Sprintf("TimeLineType(%d)", i)
	}
	return _TimeLineTypeName[_TimeLineTypeIndex[i]:_TimeLineTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TimeLineTypeNoOp() {
	var x [1]struct{}
	_ = x[NoType-(0)]
	_ = x[First-(1)]
	_ = x[Second-(2)]
	_ = x[SecondOf2-(3)]
	_ = x[SecondOf3-(4)]
	_ = x[SecondOf4-(5)]
	_ = x[SecondOf2And4-(6)]
	_ = x[SecondOf5-(7)]
	_ = x[SecondOf6-(8)]
	_ = x[SecondOf7-(9)]
	_ = x[SecondOf8-(10)]
	_ = x[Intro-(11)]
}

var _TimeLineTypeValues = []TimeLineType{NoType, First, Second, SecondOf2, SecondOf3, SecondOf4, SecondOf2And4, SecondOf5, SecondOf6, SecondOf7, SecondOf8, Intro}

var _TimeLineTypeNameToValueMap = map[string]TimeLineType{
	_TimeLineTypeName[0:6]:        NoType,
	_TimeLineTypeLowerName[0:6]:   NoType,
	_TimeLineTypeName[6:11]:       First,
	_TimeLineTypeLowerName[6:11]:  First,
	_TimeLineTypeName[11:17]:      Second,
	_TimeLineTypeLowerName[11:17]: Second,
	_TimeLineTypeName[17:26]:      SecondOf2,
	_TimeLineTypeLowerName[17:26]: SecondOf2,
	_TimeLineTypeName[26:35]:      SecondOf3,
	_TimeLineTypeLowerName[26:35]: SecondOf3,
	_TimeLineTypeName[35:44]:      SecondOf4,
	_TimeLineTypeLowerName[35:44]: SecondOf4,
	_TimeLineTypeName[44:57]:      SecondOf2And4,
	_TimeLineTypeLowerName[44:57]: SecondOf2And4,
	_TimeLineTypeName[57:66]:      SecondOf5,
	_TimeLineTypeLowerName[57:66]: SecondOf5,
	_TimeLineTypeName[66:75]:      SecondOf6,
	_TimeLineTypeLowerName[66:75]: SecondOf6,
	_TimeLineTypeName[75:84]:      SecondOf7,
	_TimeLineTypeLowerName[75:84]: SecondOf7,
	_TimeLineTypeName[84:93]:      SecondOf8,
	_TimeLineTypeLowerName[84:93]: SecondOf8,
	_TimeLineTypeName[93:98]:      Intro,
	_TimeLineTypeLowerName[93:98]: Intro,
}

var _TimeLineTypeNames = []string{
	_TimeLineTypeName[0:6],
	_TimeLineTypeName[6:11],
	_TimeLineTypeName[11:17],
	_TimeLineTypeName[17:26],
	_TimeLineTypeName[26:35],
	_TimeLineTypeName[35:44],
	_TimeLineTypeName[44:57],
	_TimeLineTypeName[57:66],
	_TimeLineTypeName[66:75],
	_TimeLineTypeName[75:84],
	_TimeLineTypeName[84:93],
	_TimeLineTypeName[93:98],
}

// TimeLineTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TimeLineTypeString(s string) (TimeLineType, error) {
	if val, ok := _TimeLineTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TimeLineTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TimeLineType values", s)
}

// TimeLineTypeValues returns all values of the enum
func TimeLineTypeValues() []TimeLineType {
	return _TimeLineTypeValues
}

// TimeLineTypeStrings returns a slice of all String values of the enum
func TimeLineTypeStrings() []string {
	strs := make([]string, len(_TimeLineTypeNames))
	copy(strs, _TimeLineTypeNames)
	return strs
}

// IsATimeLineType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TimeLineType) IsATimeLineType() bool {
	for _, v := range _TimeLineTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TimeLineType
func (i TimeLineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TimeLineType
func (i *TimeLineType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TimeLineType should be a string, got %s", data)
	}

	var err error
	*i, err = TimeLineTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for TimeLineType
func (i TimeLineType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TimeLineType
func (i *TimeLineType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TimeLineTypeString(s)
	return err
}
