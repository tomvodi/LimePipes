// Code generated by "enumer -json -yaml -type=TupletType"; DO NOT EDIT.

package tuplet

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TupletTypeName = "NoTypeType23Type32Type43Type46Type53Type54Type64Type74Type76"

var _TupletTypeIndex = [...]uint8{0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60}

const _TupletTypeLowerName = "notypetype23type32type43type46type53type54type64type74type76"

func (i TupletType) String() string {
	if i >= TupletType(len(_TupletTypeIndex)-1) {
		return fmt.Sprintf("TupletType(%d)", i)
	}
	return _TupletTypeName[_TupletTypeIndex[i]:_TupletTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TupletTypeNoOp() {
	var x [1]struct{}
	_ = x[NoType-(0)]
	_ = x[Type23-(1)]
	_ = x[Type32-(2)]
	_ = x[Type43-(3)]
	_ = x[Type46-(4)]
	_ = x[Type53-(5)]
	_ = x[Type54-(6)]
	_ = x[Type64-(7)]
	_ = x[Type74-(8)]
	_ = x[Type76-(9)]
}

var _TupletTypeValues = []TupletType{NoType, Type23, Type32, Type43, Type46, Type53, Type54, Type64, Type74, Type76}

var _TupletTypeNameToValueMap = map[string]TupletType{
	_TupletTypeName[0:6]:        NoType,
	_TupletTypeLowerName[0:6]:   NoType,
	_TupletTypeName[6:12]:       Type23,
	_TupletTypeLowerName[6:12]:  Type23,
	_TupletTypeName[12:18]:      Type32,
	_TupletTypeLowerName[12:18]: Type32,
	_TupletTypeName[18:24]:      Type43,
	_TupletTypeLowerName[18:24]: Type43,
	_TupletTypeName[24:30]:      Type46,
	_TupletTypeLowerName[24:30]: Type46,
	_TupletTypeName[30:36]:      Type53,
	_TupletTypeLowerName[30:36]: Type53,
	_TupletTypeName[36:42]:      Type54,
	_TupletTypeLowerName[36:42]: Type54,
	_TupletTypeName[42:48]:      Type64,
	_TupletTypeLowerName[42:48]: Type64,
	_TupletTypeName[48:54]:      Type74,
	_TupletTypeLowerName[48:54]: Type74,
	_TupletTypeName[54:60]:      Type76,
	_TupletTypeLowerName[54:60]: Type76,
}

var _TupletTypeNames = []string{
	_TupletTypeName[0:6],
	_TupletTypeName[6:12],
	_TupletTypeName[12:18],
	_TupletTypeName[18:24],
	_TupletTypeName[24:30],
	_TupletTypeName[30:36],
	_TupletTypeName[36:42],
	_TupletTypeName[42:48],
	_TupletTypeName[48:54],
	_TupletTypeName[54:60],
}

// TupletTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TupletTypeString(s string) (TupletType, error) {
	if val, ok := _TupletTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TupletTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TupletType values", s)
}

// TupletTypeValues returns all values of the enum
func TupletTypeValues() []TupletType {
	return _TupletTypeValues
}

// TupletTypeStrings returns a slice of all String values of the enum
func TupletTypeStrings() []string {
	strs := make([]string, len(_TupletTypeNames))
	copy(strs, _TupletTypeNames)
	return strs
}

// IsATupletType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TupletType) IsATupletType() bool {
	for _, v := range _TupletTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TupletType
func (i TupletType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TupletType
func (i *TupletType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TupletType should be a string, got %s", data)
	}

	var err error
	*i, err = TupletTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for TupletType
func (i TupletType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TupletType
func (i *TupletType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TupletTypeString(s)
	return err
}
