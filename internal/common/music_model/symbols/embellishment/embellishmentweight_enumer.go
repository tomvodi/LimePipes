// Code generated by "enumer -json -yaml -type=EmbellishmentWeight"; DO NOT EDIT.

package embellishment

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EmbellishmentWeightName = "NoWeightLightHeavy"

var _EmbellishmentWeightIndex = [...]uint8{0, 8, 13, 18}

const _EmbellishmentWeightLowerName = "noweightlightheavy"

func (i EmbellishmentWeight) String() string {
	if i >= EmbellishmentWeight(len(_EmbellishmentWeightIndex)-1) {
		return fmt.Sprintf("EmbellishmentWeight(%d)", i)
	}
	return _EmbellishmentWeightName[_EmbellishmentWeightIndex[i]:_EmbellishmentWeightIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EmbellishmentWeightNoOp() {
	var x [1]struct{}
	_ = x[NoWeight-(0)]
	_ = x[Light-(1)]
	_ = x[Heavy-(2)]
}

var _EmbellishmentWeightValues = []EmbellishmentWeight{NoWeight, Light, Heavy}

var _EmbellishmentWeightNameToValueMap = map[string]EmbellishmentWeight{
	_EmbellishmentWeightName[0:8]:        NoWeight,
	_EmbellishmentWeightLowerName[0:8]:   NoWeight,
	_EmbellishmentWeightName[8:13]:       Light,
	_EmbellishmentWeightLowerName[8:13]:  Light,
	_EmbellishmentWeightName[13:18]:      Heavy,
	_EmbellishmentWeightLowerName[13:18]: Heavy,
}

var _EmbellishmentWeightNames = []string{
	_EmbellishmentWeightName[0:8],
	_EmbellishmentWeightName[8:13],
	_EmbellishmentWeightName[13:18],
}

// EmbellishmentWeightString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EmbellishmentWeightString(s string) (EmbellishmentWeight, error) {
	if val, ok := _EmbellishmentWeightNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EmbellishmentWeightNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EmbellishmentWeight values", s)
}

// EmbellishmentWeightValues returns all values of the enum
func EmbellishmentWeightValues() []EmbellishmentWeight {
	return _EmbellishmentWeightValues
}

// EmbellishmentWeightStrings returns a slice of all String values of the enum
func EmbellishmentWeightStrings() []string {
	strs := make([]string, len(_EmbellishmentWeightNames))
	copy(strs, _EmbellishmentWeightNames)
	return strs
}

// IsAEmbellishmentWeight returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EmbellishmentWeight) IsAEmbellishmentWeight() bool {
	for _, v := range _EmbellishmentWeightValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EmbellishmentWeight
func (i EmbellishmentWeight) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EmbellishmentWeight
func (i *EmbellishmentWeight) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EmbellishmentWeight should be a string, got %s", data)
	}

	var err error
	*i, err = EmbellishmentWeightString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for EmbellishmentWeight
func (i EmbellishmentWeight) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EmbellishmentWeight
func (i *EmbellishmentWeight) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = EmbellishmentWeightString(s)
	return err
}
