// Code generated by "enumer -json -yaml -type=EmbellishmentVariant"; DO NOT EDIT.

package embellishment

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EmbellishmentVariantName = "NoVariantGHalfThumb"

var _EmbellishmentVariantIndex = [...]uint8{0, 9, 10, 14, 19}

const _EmbellishmentVariantLowerName = "novariantghalfthumb"

func (i EmbellishmentVariant) String() string {
	if i >= EmbellishmentVariant(len(_EmbellishmentVariantIndex)-1) {
		return fmt.Sprintf("EmbellishmentVariant(%d)", i)
	}
	return _EmbellishmentVariantName[_EmbellishmentVariantIndex[i]:_EmbellishmentVariantIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EmbellishmentVariantNoOp() {
	var x [1]struct{}
	_ = x[NoVariant-(0)]
	_ = x[G-(1)]
	_ = x[Half-(2)]
	_ = x[Thumb-(3)]
}

var _EmbellishmentVariantValues = []EmbellishmentVariant{NoVariant, G, Half, Thumb}

var _EmbellishmentVariantNameToValueMap = map[string]EmbellishmentVariant{
	_EmbellishmentVariantName[0:9]:        NoVariant,
	_EmbellishmentVariantLowerName[0:9]:   NoVariant,
	_EmbellishmentVariantName[9:10]:       G,
	_EmbellishmentVariantLowerName[9:10]:  G,
	_EmbellishmentVariantName[10:14]:      Half,
	_EmbellishmentVariantLowerName[10:14]: Half,
	_EmbellishmentVariantName[14:19]:      Thumb,
	_EmbellishmentVariantLowerName[14:19]: Thumb,
}

var _EmbellishmentVariantNames = []string{
	_EmbellishmentVariantName[0:9],
	_EmbellishmentVariantName[9:10],
	_EmbellishmentVariantName[10:14],
	_EmbellishmentVariantName[14:19],
}

// EmbellishmentVariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EmbellishmentVariantString(s string) (EmbellishmentVariant, error) {
	if val, ok := _EmbellishmentVariantNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EmbellishmentVariantNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EmbellishmentVariant values", s)
}

// EmbellishmentVariantValues returns all values of the enum
func EmbellishmentVariantValues() []EmbellishmentVariant {
	return _EmbellishmentVariantValues
}

// EmbellishmentVariantStrings returns a slice of all String values of the enum
func EmbellishmentVariantStrings() []string {
	strs := make([]string, len(_EmbellishmentVariantNames))
	copy(strs, _EmbellishmentVariantNames)
	return strs
}

// IsAEmbellishmentVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EmbellishmentVariant) IsAEmbellishmentVariant() bool {
	for _, v := range _EmbellishmentVariantValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EmbellishmentVariant
func (i EmbellishmentVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EmbellishmentVariant
func (i *EmbellishmentVariant) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EmbellishmentVariant should be a string, got %s", data)
	}

	var err error
	*i, err = EmbellishmentVariantString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for EmbellishmentVariant
func (i EmbellishmentVariant) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EmbellishmentVariant
func (i *EmbellishmentVariant) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = EmbellishmentVariantString(s)
	return err
}
