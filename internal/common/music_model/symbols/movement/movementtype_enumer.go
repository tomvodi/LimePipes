// Code generated by "enumer -json -yaml -type=MovementType"; DO NOT EDIT.

package movement

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MovementTypeName = "NoMovementCadence"

var _MovementTypeIndex = [...]uint8{0, 10, 17}

const _MovementTypeLowerName = "nomovementcadence"

func (i MovementType) String() string {
	if i >= MovementType(len(_MovementTypeIndex)-1) {
		return fmt.Sprintf("MovementType(%d)", i)
	}
	return _MovementTypeName[_MovementTypeIndex[i]:_MovementTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MovementTypeNoOp() {
	var x [1]struct{}
	_ = x[NoMovement-(0)]
	_ = x[Cadence-(1)]
}

var _MovementTypeValues = []MovementType{NoMovement, Cadence}

var _MovementTypeNameToValueMap = map[string]MovementType{
	_MovementTypeName[0:10]:       NoMovement,
	_MovementTypeLowerName[0:10]:  NoMovement,
	_MovementTypeName[10:17]:      Cadence,
	_MovementTypeLowerName[10:17]: Cadence,
}

var _MovementTypeNames = []string{
	_MovementTypeName[0:10],
	_MovementTypeName[10:17],
}

// MovementTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MovementTypeString(s string) (MovementType, error) {
	if val, ok := _MovementTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MovementTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MovementType values", s)
}

// MovementTypeValues returns all values of the enum
func MovementTypeValues() []MovementType {
	return _MovementTypeValues
}

// MovementTypeStrings returns a slice of all String values of the enum
func MovementTypeStrings() []string {
	strs := make([]string, len(_MovementTypeNames))
	copy(strs, _MovementTypeNames)
	return strs
}

// IsAMovementType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MovementType) IsAMovementType() bool {
	for _, v := range _MovementTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MovementType
func (i MovementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MovementType
func (i *MovementType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MovementType should be a string, got %s", data)
	}

	var err error
	*i, err = MovementTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for MovementType
func (i MovementType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MovementType
func (i *MovementType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MovementTypeString(s)
	return err
}
