// Code generated by "enumer -json -yaml -type=Variant"; DO NOT EDIT.

package movement

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _VariantName = "NoVariantHalfGThumbLongLowG"

var _VariantIndex = [...]uint8{0, 9, 13, 14, 19, 27}

const _VariantLowerName = "novarianthalfgthumblonglowg"

func (i Variant) String() string {
	if i >= Variant(len(_VariantIndex)-1) {
		return fmt.Sprintf("Variant(%d)", i)
	}
	return _VariantName[_VariantIndex[i]:_VariantIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VariantNoOp() {
	var x [1]struct{}
	_ = x[NoVariant-(0)]
	_ = x[Half-(1)]
	_ = x[G-(2)]
	_ = x[Thumb-(3)]
	_ = x[LongLowG-(4)]
}

var _VariantValues = []Variant{NoVariant, Half, G, Thumb, LongLowG}

var _VariantNameToValueMap = map[string]Variant{
	_VariantName[0:9]:        NoVariant,
	_VariantLowerName[0:9]:   NoVariant,
	_VariantName[9:13]:       Half,
	_VariantLowerName[9:13]:  Half,
	_VariantName[13:14]:      G,
	_VariantLowerName[13:14]: G,
	_VariantName[14:19]:      Thumb,
	_VariantLowerName[14:19]: Thumb,
	_VariantName[19:27]:      LongLowG,
	_VariantLowerName[19:27]: LongLowG,
}

var _VariantNames = []string{
	_VariantName[0:9],
	_VariantName[9:13],
	_VariantName[13:14],
	_VariantName[14:19],
	_VariantName[19:27],
}

// VariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VariantString(s string) (Variant, error) {
	if val, ok := _VariantNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VariantNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Variant values", s)
}

// VariantValues returns all values of the enum
func VariantValues() []Variant {
	return _VariantValues
}

// VariantStrings returns a slice of all String values of the enum
func VariantStrings() []string {
	strs := make([]string, len(_VariantNames))
	copy(strs, _VariantNames)
	return strs
}

// IsAVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Variant) IsAVariant() bool {
	for _, v := range _VariantValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Variant
func (i Variant) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Variant
func (i *Variant) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Variant should be a string, got %s", data)
	}

	var err error
	*i, err = VariantString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Variant
func (i Variant) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Variant
func (i *Variant) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = VariantString(s)
	return err
}
