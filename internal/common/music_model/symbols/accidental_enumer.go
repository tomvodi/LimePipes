// Code generated by "enumer -json -yaml -type=Accidental"; DO NOT EDIT.

package symbols

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AccidentalName = "NoAccidentalSharpFlatNatural"

var _AccidentalIndex = [...]uint8{0, 12, 17, 21, 28}

const _AccidentalLowerName = "noaccidentalsharpflatnatural"

func (i Accidental) String() string {
	if i >= Accidental(len(_AccidentalIndex)-1) {
		return fmt.Sprintf("Accidental(%d)", i)
	}
	return _AccidentalName[_AccidentalIndex[i]:_AccidentalIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccidentalNoOp() {
	var x [1]struct{}
	_ = x[NoAccidental-(0)]
	_ = x[Sharp-(1)]
	_ = x[Flat-(2)]
	_ = x[Natural-(3)]
}

var _AccidentalValues = []Accidental{NoAccidental, Sharp, Flat, Natural}

var _AccidentalNameToValueMap = map[string]Accidental{
	_AccidentalName[0:12]:       NoAccidental,
	_AccidentalLowerName[0:12]:  NoAccidental,
	_AccidentalName[12:17]:      Sharp,
	_AccidentalLowerName[12:17]: Sharp,
	_AccidentalName[17:21]:      Flat,
	_AccidentalLowerName[17:21]: Flat,
	_AccidentalName[21:28]:      Natural,
	_AccidentalLowerName[21:28]: Natural,
}

var _AccidentalNames = []string{
	_AccidentalName[0:12],
	_AccidentalName[12:17],
	_AccidentalName[17:21],
	_AccidentalName[21:28],
}

// AccidentalString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccidentalString(s string) (Accidental, error) {
	if val, ok := _AccidentalNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccidentalNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Accidental values", s)
}

// AccidentalValues returns all values of the enum
func AccidentalValues() []Accidental {
	return _AccidentalValues
}

// AccidentalStrings returns a slice of all String values of the enum
func AccidentalStrings() []string {
	strs := make([]string, len(_AccidentalNames))
	copy(strs, _AccidentalNames)
	return strs
}

// IsAAccidental returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Accidental) IsAAccidental() bool {
	for _, v := range _AccidentalValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Accidental
func (i Accidental) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Accidental
func (i *Accidental) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Accidental should be a string, got %s", data)
	}

	var err error
	*i, err = AccidentalString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Accidental
func (i Accidental) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Accidental
func (i *Accidental) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AccidentalString(s)
	return err
}
