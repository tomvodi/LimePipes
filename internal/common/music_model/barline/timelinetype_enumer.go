// Code generated by "enumer -json -yaml -type=TimelineType"; DO NOT EDIT.

package barline

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TimelineTypeName = "NoTimelineSegnoDalsegnoFineDacapoAlFine"

var _TimelineTypeIndex = [...]uint8{0, 10, 15, 23, 27, 39}

const _TimelineTypeLowerName = "notimelinesegnodalsegnofinedacapoalfine"

func (i TimelineType) String() string {
	if i >= TimelineType(len(_TimelineTypeIndex)-1) {
		return fmt.Sprintf("TimelineType(%d)", i)
	}
	return _TimelineTypeName[_TimelineTypeIndex[i]:_TimelineTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TimelineTypeNoOp() {
	var x [1]struct{}
	_ = x[NoTimeline-(0)]
	_ = x[Segno-(1)]
	_ = x[Dalsegno-(2)]
	_ = x[Fine-(3)]
	_ = x[DacapoAlFine-(4)]
}

var _TimelineTypeValues = []TimelineType{NoTimeline, Segno, Dalsegno, Fine, DacapoAlFine}

var _TimelineTypeNameToValueMap = map[string]TimelineType{
	_TimelineTypeName[0:10]:       NoTimeline,
	_TimelineTypeLowerName[0:10]:  NoTimeline,
	_TimelineTypeName[10:15]:      Segno,
	_TimelineTypeLowerName[10:15]: Segno,
	_TimelineTypeName[15:23]:      Dalsegno,
	_TimelineTypeLowerName[15:23]: Dalsegno,
	_TimelineTypeName[23:27]:      Fine,
	_TimelineTypeLowerName[23:27]: Fine,
	_TimelineTypeName[27:39]:      DacapoAlFine,
	_TimelineTypeLowerName[27:39]: DacapoAlFine,
}

var _TimelineTypeNames = []string{
	_TimelineTypeName[0:10],
	_TimelineTypeName[10:15],
	_TimelineTypeName[15:23],
	_TimelineTypeName[23:27],
	_TimelineTypeName[27:39],
}

// TimelineTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TimelineTypeString(s string) (TimelineType, error) {
	if val, ok := _TimelineTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TimelineTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TimelineType values", s)
}

// TimelineTypeValues returns all values of the enum
func TimelineTypeValues() []TimelineType {
	return _TimelineTypeValues
}

// TimelineTypeStrings returns a slice of all String values of the enum
func TimelineTypeStrings() []string {
	strs := make([]string, len(_TimelineTypeNames))
	copy(strs, _TimelineTypeNames)
	return strs
}

// IsATimelineType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TimelineType) IsATimelineType() bool {
	for _, v := range _TimelineTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TimelineType
func (i TimelineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TimelineType
func (i *TimelineType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TimelineType should be a string, got %s", data)
	}

	var err error
	*i, err = TimelineTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for TimelineType
func (i TimelineType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TimelineType
func (i *TimelineType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TimelineTypeString(s)
	return err
}
