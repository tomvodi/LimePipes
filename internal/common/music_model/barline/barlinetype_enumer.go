// Code generated by "enumer -json -yaml -type=BarlineType"; DO NOT EDIT.

package barline

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BarlineTypeName = "RegularHeavyHeavyHeavyLightHeavyHeavyLight"

var _BarlineTypeIndex = [...]uint8{0, 7, 12, 22, 32, 42}

const _BarlineTypeLowerName = "regularheavyheavyheavylightheavyheavylight"

func (i BarlineType) String() string {
	if i >= BarlineType(len(_BarlineTypeIndex)-1) {
		return fmt.Sprintf("BarlineType(%d)", i)
	}
	return _BarlineTypeName[_BarlineTypeIndex[i]:_BarlineTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BarlineTypeNoOp() {
	var x [1]struct{}
	_ = x[Regular-(0)]
	_ = x[Heavy-(1)]
	_ = x[HeavyHeavy-(2)]
	_ = x[LightHeavy-(3)]
	_ = x[HeavyLight-(4)]
}

var _BarlineTypeValues = []BarlineType{Regular, Heavy, HeavyHeavy, LightHeavy, HeavyLight}

var _BarlineTypeNameToValueMap = map[string]BarlineType{
	_BarlineTypeName[0:7]:        Regular,
	_BarlineTypeLowerName[0:7]:   Regular,
	_BarlineTypeName[7:12]:       Heavy,
	_BarlineTypeLowerName[7:12]:  Heavy,
	_BarlineTypeName[12:22]:      HeavyHeavy,
	_BarlineTypeLowerName[12:22]: HeavyHeavy,
	_BarlineTypeName[22:32]:      LightHeavy,
	_BarlineTypeLowerName[22:32]: LightHeavy,
	_BarlineTypeName[32:42]:      HeavyLight,
	_BarlineTypeLowerName[32:42]: HeavyLight,
}

var _BarlineTypeNames = []string{
	_BarlineTypeName[0:7],
	_BarlineTypeName[7:12],
	_BarlineTypeName[12:22],
	_BarlineTypeName[22:32],
	_BarlineTypeName[32:42],
}

// BarlineTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BarlineTypeString(s string) (BarlineType, error) {
	if val, ok := _BarlineTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BarlineTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BarlineType values", s)
}

// BarlineTypeValues returns all values of the enum
func BarlineTypeValues() []BarlineType {
	return _BarlineTypeValues
}

// BarlineTypeStrings returns a slice of all String values of the enum
func BarlineTypeStrings() []string {
	strs := make([]string, len(_BarlineTypeNames))
	copy(strs, _BarlineTypeNames)
	return strs
}

// IsABarlineType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BarlineType) IsABarlineType() bool {
	for _, v := range _BarlineTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BarlineType
func (i BarlineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BarlineType
func (i *BarlineType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BarlineType should be a string, got %s", data)
	}

	var err error
	*i, err = BarlineTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for BarlineType
func (i BarlineType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BarlineType
func (i *BarlineType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BarlineTypeString(s)
	return err
}
