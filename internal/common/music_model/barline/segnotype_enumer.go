// Code generated by "enumer -json -yaml -type=SegnoType"; DO NOT EDIT.

package barline

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SegnoTypeName = "NoSegnoTypeSegnoDalsegno"

var _SegnoTypeIndex = [...]uint8{0, 11, 16, 24}

const _SegnoTypeLowerName = "nosegnotypesegnodalsegno"

func (i SegnoType) String() string {
	if i >= SegnoType(len(_SegnoTypeIndex)-1) {
		return fmt.Sprintf("SegnoType(%d)", i)
	}
	return _SegnoTypeName[_SegnoTypeIndex[i]:_SegnoTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SegnoTypeNoOp() {
	var x [1]struct{}
	_ = x[NoSegnoType-(0)]
	_ = x[Segno-(1)]
	_ = x[Dalsegno-(2)]
}

var _SegnoTypeValues = []SegnoType{NoSegnoType, Segno, Dalsegno}

var _SegnoTypeNameToValueMap = map[string]SegnoType{
	_SegnoTypeName[0:11]:       NoSegnoType,
	_SegnoTypeLowerName[0:11]:  NoSegnoType,
	_SegnoTypeName[11:16]:      Segno,
	_SegnoTypeLowerName[11:16]: Segno,
	_SegnoTypeName[16:24]:      Dalsegno,
	_SegnoTypeLowerName[16:24]: Dalsegno,
}

var _SegnoTypeNames = []string{
	_SegnoTypeName[0:11],
	_SegnoTypeName[11:16],
	_SegnoTypeName[16:24],
}

// SegnoTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SegnoTypeString(s string) (SegnoType, error) {
	if val, ok := _SegnoTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SegnoTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SegnoType values", s)
}

// SegnoTypeValues returns all values of the enum
func SegnoTypeValues() []SegnoType {
	return _SegnoTypeValues
}

// SegnoTypeStrings returns a slice of all String values of the enum
func SegnoTypeStrings() []string {
	strs := make([]string, len(_SegnoTypeNames))
	copy(strs, _SegnoTypeNames)
	return strs
}

// IsASegnoType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SegnoType) IsASegnoType() bool {
	for _, v := range _SegnoTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SegnoType
func (i SegnoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SegnoType
func (i *SegnoType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SegnoType should be a string, got %s", data)
	}

	var err error
	*i, err = SegnoTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for SegnoType
func (i SegnoType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SegnoType
func (i *SegnoType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SegnoTypeString(s)
	return err
}
