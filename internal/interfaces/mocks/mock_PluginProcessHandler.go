// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/tomvodi/limepipes-plugin-api/plugin/v1/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// PluginProcessHandler is an autogenerated mock type for the PluginProcessHandler type
type PluginProcessHandler struct {
	mock.Mock
}

type PluginProcessHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *PluginProcessHandler) EXPECT() *PluginProcessHandler_Expecter {
	return &PluginProcessHandler_Expecter{mock: &_m.Mock}
}

// GetPlugin provides a mock function with given fields: pluginID
func (_m *PluginProcessHandler) GetPlugin(pluginID string) (interfaces.LimePipesPlugin, error) {
	ret := _m.Called(pluginID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 interfaces.LimePipesPlugin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interfaces.LimePipesPlugin, error)); ok {
		return rf(pluginID)
	}
	if rf, ok := ret.Get(0).(func(string) interfaces.LimePipesPlugin); ok {
		r0 = rf(pluginID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.LimePipesPlugin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pluginID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PluginProcessHandler_GetPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlugin'
type PluginProcessHandler_GetPlugin_Call struct {
	*mock.Call
}

// GetPlugin is a helper method to define mock.On call
//   - pluginID string
func (_e *PluginProcessHandler_Expecter) GetPlugin(pluginID interface{}) *PluginProcessHandler_GetPlugin_Call {
	return &PluginProcessHandler_GetPlugin_Call{Call: _e.mock.On("GetPlugin", pluginID)}
}

func (_c *PluginProcessHandler_GetPlugin_Call) Run(run func(pluginID string)) *PluginProcessHandler_GetPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PluginProcessHandler_GetPlugin_Call) Return(_a0 interfaces.LimePipesPlugin, _a1 error) *PluginProcessHandler_GetPlugin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PluginProcessHandler_GetPlugin_Call) RunAndReturn(run func(string) (interfaces.LimePipesPlugin, error)) *PluginProcessHandler_GetPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// KillPlugins provides a mock function with given fields:
func (_m *PluginProcessHandler) KillPlugins() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KillPlugins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginProcessHandler_KillPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KillPlugins'
type PluginProcessHandler_KillPlugins_Call struct {
	*mock.Call
}

// KillPlugins is a helper method to define mock.On call
func (_e *PluginProcessHandler_Expecter) KillPlugins() *PluginProcessHandler_KillPlugins_Call {
	return &PluginProcessHandler_KillPlugins_Call{Call: _e.mock.On("KillPlugins")}
}

func (_c *PluginProcessHandler_KillPlugins_Call) Run(run func()) *PluginProcessHandler_KillPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginProcessHandler_KillPlugins_Call) Return(_a0 error) *PluginProcessHandler_KillPlugins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginProcessHandler_KillPlugins_Call) RunAndReturn(run func() error) *PluginProcessHandler_KillPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// RunPlugin provides a mock function with given fields: pluginID, executable
func (_m *PluginProcessHandler) RunPlugin(pluginID string, executable string) error {
	ret := _m.Called(pluginID, executable)

	if len(ret) == 0 {
		panic("no return value specified for RunPlugin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(pluginID, executable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginProcessHandler_RunPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPlugin'
type PluginProcessHandler_RunPlugin_Call struct {
	*mock.Call
}

// RunPlugin is a helper method to define mock.On call
//   - pluginID string
//   - executable string
func (_e *PluginProcessHandler_Expecter) RunPlugin(pluginID interface{}, executable interface{}) *PluginProcessHandler_RunPlugin_Call {
	return &PluginProcessHandler_RunPlugin_Call{Call: _e.mock.On("RunPlugin", pluginID, executable)}
}

func (_c *PluginProcessHandler_RunPlugin_Call) Run(run func(pluginID string, executable string)) *PluginProcessHandler_RunPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PluginProcessHandler_RunPlugin_Call) Return(_a0 error) *PluginProcessHandler_RunPlugin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginProcessHandler_RunPlugin_Call) RunAndReturn(run func(string, string) error) *PluginProcessHandler_RunPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// NewPluginProcessHandler creates a new instance of PluginProcessHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginProcessHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginProcessHandler {
	mock := &PluginProcessHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
