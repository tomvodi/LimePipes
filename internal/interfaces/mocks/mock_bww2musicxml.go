// Code generated by MockGen. DO NOT EDIT.
// Source: bww2musicxml.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	music_model "banduslib/internal/common/music_model"
	model "banduslib/internal/musicxml/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBww2Musicxml is a mock of Bww2Musicxml interface.
type MockBww2Musicxml struct {
	ctrl     *gomock.Controller
	recorder *MockBww2MusicxmlMockRecorder
}

// MockBww2MusicxmlMockRecorder is the mock recorder for MockBww2Musicxml.
type MockBww2MusicxmlMockRecorder struct {
	mock *MockBww2Musicxml
}

// NewMockBww2Musicxml creates a new mock instance.
func NewMockBww2Musicxml(ctrl *gomock.Controller) *MockBww2Musicxml {
	mock := &MockBww2Musicxml{ctrl: ctrl}
	mock.recorder = &MockBww2MusicxmlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBww2Musicxml) EXPECT() *MockBww2MusicxmlMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockBww2Musicxml) Convert(music []music_model.Tune) (*model.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", music)
	ret0, _ := ret[0].(*model.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockBww2MusicxmlMockRecorder) Convert(music interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockBww2Musicxml)(nil).Convert), music)
}
