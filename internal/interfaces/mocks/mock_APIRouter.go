// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// APIRouter is an autogenerated mock type for the APIRouter type
type APIRouter struct {
	mock.Mock
}

type APIRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *APIRouter) EXPECT() *APIRouter_Expecter {
	return &APIRouter_Expecter{mock: &_m.Mock}
}

// GetEngine provides a mock function with given fields:
func (_m *APIRouter) GetEngine() *gin.Engine {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEngine")
	}

	var r0 *gin.Engine
	if rf, ok := ret.Get(0).(func() *gin.Engine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}

	return r0
}

// APIRouter_GetEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEngine'
type APIRouter_GetEngine_Call struct {
	*mock.Call
}

// GetEngine is a helper method to define mock.On call
func (_e *APIRouter_Expecter) GetEngine() *APIRouter_GetEngine_Call {
	return &APIRouter_GetEngine_Call{Call: _e.mock.On("GetEngine")}
}

func (_c *APIRouter_GetEngine_Call) Run(run func()) *APIRouter_GetEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *APIRouter_GetEngine_Call) Return(_a0 *gin.Engine) *APIRouter_GetEngine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIRouter_GetEngine_Call) RunAndReturn(run func() *gin.Engine) *APIRouter_GetEngine_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPIRouter creates a new instance of APIRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIRouter {
	mock := &APIRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
