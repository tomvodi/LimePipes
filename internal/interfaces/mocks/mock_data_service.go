// Code generated by MockGen. DO NOT EDIT.
// Source: data_service.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	apimodel "github.com/tomvodi/limepipes/internal/api/apimodel"
	common "github.com/tomvodi/limepipes/internal/common"
	music_model "github.com/tomvodi/limepipes/internal/common/music_model"
	model "github.com/tomvodi/limepipes/internal/database/model"
	file_type "github.com/tomvodi/limepipes/internal/database/model/file_type"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataService is a mock of DataService interface.
type MockDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceMockRecorder
}

// MockDataServiceMockRecorder is the mock recorder for MockDataService.
type MockDataServiceMockRecorder struct {
	mock *MockDataService
}

// NewMockDataService creates a new mock instance.
func NewMockDataService(ctrl *gomock.Controller) *MockDataService {
	mock := &MockDataService{ctrl: ctrl}
	mock.recorder = &MockDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataService) EXPECT() *MockDataServiceMockRecorder {
	return m.recorder
}

// AddFileToTune mocks base method.
func (m *MockDataService) AddFileToTune(tuneId uint64, tFile *model.TuneFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToTune", tuneId, tFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToTune indicates an expected call of AddFileToTune.
func (mr *MockDataServiceMockRecorder) AddFileToTune(tuneId, tFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToTune", reflect.TypeOf((*MockDataService)(nil).AddFileToTune), tuneId, tFile)
}

// AssignTunesToMusicSet mocks base method.
func (m *MockDataService) AssignTunesToMusicSet(setId uint64, tuneIds []uint64) (*apimodel.MusicSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTunesToMusicSet", setId, tuneIds)
	ret0, _ := ret[0].(*apimodel.MusicSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTunesToMusicSet indicates an expected call of AssignTunesToMusicSet.
func (mr *MockDataServiceMockRecorder) AssignTunesToMusicSet(setId, tuneIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTunesToMusicSet", reflect.TypeOf((*MockDataService)(nil).AssignTunesToMusicSet), setId, tuneIds)
}

// CreateMusicSet mocks base method.
func (m *MockDataService) CreateMusicSet(tune apimodel.CreateSet, importFile *model.ImportFile) (*apimodel.MusicSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMusicSet", tune, importFile)
	ret0, _ := ret[0].(*apimodel.MusicSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMusicSet indicates an expected call of CreateMusicSet.
func (mr *MockDataServiceMockRecorder) CreateMusicSet(tune, importFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMusicSet", reflect.TypeOf((*MockDataService)(nil).CreateMusicSet), tune, importFile)
}

// CreateTune mocks base method.
func (m *MockDataService) CreateTune(tune apimodel.CreateTune, importFile *model.ImportFile) (*apimodel.Tune, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTune", tune, importFile)
	ret0, _ := ret[0].(*apimodel.Tune)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTune indicates an expected call of CreateTune.
func (mr *MockDataServiceMockRecorder) CreateTune(tune, importFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTune", reflect.TypeOf((*MockDataService)(nil).CreateTune), tune, importFile)
}

// DeleteFileFromTune mocks base method.
func (m *MockDataService) DeleteFileFromTune(tuneId uint64, fType file_type.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileFromTune", tuneId, fType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileFromTune indicates an expected call of DeleteFileFromTune.
func (mr *MockDataServiceMockRecorder) DeleteFileFromTune(tuneId, fType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileFromTune", reflect.TypeOf((*MockDataService)(nil).DeleteFileFromTune), tuneId, fType)
}

// DeleteMusicSet mocks base method.
func (m *MockDataService) DeleteMusicSet(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusicSet", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusicSet indicates an expected call of DeleteMusicSet.
func (mr *MockDataServiceMockRecorder) DeleteMusicSet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusicSet", reflect.TypeOf((*MockDataService)(nil).DeleteMusicSet), id)
}

// DeleteTune mocks base method.
func (m *MockDataService) DeleteTune(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTune", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTune indicates an expected call of DeleteTune.
func (mr *MockDataServiceMockRecorder) DeleteTune(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTune", reflect.TypeOf((*MockDataService)(nil).DeleteTune), id)
}

// GetMusicSet mocks base method.
func (m *MockDataService) GetMusicSet(id uint64) (*apimodel.MusicSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicSet", id)
	ret0, _ := ret[0].(*apimodel.MusicSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicSet indicates an expected call of GetMusicSet.
func (mr *MockDataServiceMockRecorder) GetMusicSet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicSet", reflect.TypeOf((*MockDataService)(nil).GetMusicSet), id)
}

// GetTune mocks base method.
func (m *MockDataService) GetTune(id uint64) (*apimodel.Tune, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTune", id)
	ret0, _ := ret[0].(*apimodel.Tune)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTune indicates an expected call of GetTune.
func (mr *MockDataServiceMockRecorder) GetTune(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTune", reflect.TypeOf((*MockDataService)(nil).GetTune), id)
}

// GetTuneFile mocks base method.
func (m *MockDataService) GetTuneFile(tuneId uint64, fType file_type.Type) (*model.TuneFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTuneFile", tuneId, fType)
	ret0, _ := ret[0].(*model.TuneFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTuneFile indicates an expected call of GetTuneFile.
func (mr *MockDataServiceMockRecorder) GetTuneFile(tuneId, fType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTuneFile", reflect.TypeOf((*MockDataService)(nil).GetTuneFile), tuneId, fType)
}

// GetTuneFiles mocks base method.
func (m *MockDataService) GetTuneFiles(tuneId uint64) ([]*model.TuneFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTuneFiles", tuneId)
	ret0, _ := ret[0].([]*model.TuneFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTuneFiles indicates an expected call of GetTuneFiles.
func (mr *MockDataServiceMockRecorder) GetTuneFiles(tuneId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTuneFiles", reflect.TypeOf((*MockDataService)(nil).GetTuneFiles), tuneId)
}

// ImportMusicModel mocks base method.
func (m *MockDataService) ImportMusicModel(muMo music_model.MusicModel, fileInfo *common.ImportFileInfo, bwwFileData *common.BwwFileTuneData) ([]*apimodel.ImportTune, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportMusicModel", muMo, fileInfo, bwwFileData)
	ret0, _ := ret[0].([]*apimodel.ImportTune)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportMusicModel indicates an expected call of ImportMusicModel.
func (mr *MockDataServiceMockRecorder) ImportMusicModel(muMo, fileInfo, bwwFileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportMusicModel", reflect.TypeOf((*MockDataService)(nil).ImportMusicModel), muMo, fileInfo, bwwFileData)
}

// MusicSets mocks base method.
func (m *MockDataService) MusicSets() ([]*apimodel.MusicSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MusicSets")
	ret0, _ := ret[0].([]*apimodel.MusicSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MusicSets indicates an expected call of MusicSets.
func (mr *MockDataServiceMockRecorder) MusicSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MusicSets", reflect.TypeOf((*MockDataService)(nil).MusicSets))
}

// Tunes mocks base method.
func (m *MockDataService) Tunes() ([]*apimodel.Tune, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tunes")
	ret0, _ := ret[0].([]*apimodel.Tune)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunes indicates an expected call of Tunes.
func (mr *MockDataServiceMockRecorder) Tunes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunes", reflect.TypeOf((*MockDataService)(nil).Tunes))
}

// UpdateMusicSet mocks base method.
func (m *MockDataService) UpdateMusicSet(id uint64, tune apimodel.UpdateSet) (*apimodel.MusicSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicSet", id, tune)
	ret0, _ := ret[0].(*apimodel.MusicSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMusicSet indicates an expected call of UpdateMusicSet.
func (mr *MockDataServiceMockRecorder) UpdateMusicSet(id, tune interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicSet", reflect.TypeOf((*MockDataService)(nil).UpdateMusicSet), id, tune)
}

// UpdateTune mocks base method.
func (m *MockDataService) UpdateTune(id uint64, tune apimodel.UpdateTune) (*apimodel.Tune, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTune", id, tune)
	ret0, _ := ret[0].(*apimodel.Tune)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTune indicates an expected call of UpdateTune.
func (mr *MockDataServiceMockRecorder) UpdateTune(id, tune interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTune", reflect.TypeOf((*MockDataService)(nil).UpdateTune), id, tune)
}
