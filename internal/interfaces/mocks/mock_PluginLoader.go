// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/tomvodi/limepipes-plugin-api/plugin/v1/messages"

	v1interfaces "github.com/tomvodi/limepipes-plugin-api/plugin/v1/interfaces"
)

// PluginLoader is an autogenerated mock type for the PluginLoader type
type PluginLoader struct {
	mock.Mock
}

type PluginLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *PluginLoader) EXPECT() *PluginLoader_Expecter {
	return &PluginLoader_Expecter{mock: &_m.Mock}
}

// LoadPluginsFromDir provides a mock function with given fields: pluginsDir
func (_m *PluginLoader) LoadPluginsFromDir(pluginsDir string) error {
	ret := _m.Called(pluginsDir)

	if len(ret) == 0 {
		panic("no return value specified for LoadPluginsFromDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pluginsDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginLoader_LoadPluginsFromDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPluginsFromDir'
type PluginLoader_LoadPluginsFromDir_Call struct {
	*mock.Call
}

// LoadPluginsFromDir is a helper method to define mock.On call
//   - pluginsDir string
func (_e *PluginLoader_Expecter) LoadPluginsFromDir(pluginsDir interface{}) *PluginLoader_LoadPluginsFromDir_Call {
	return &PluginLoader_LoadPluginsFromDir_Call{Call: _e.mock.On("LoadPluginsFromDir", pluginsDir)}
}

func (_c *PluginLoader_LoadPluginsFromDir_Call) Run(run func(pluginsDir string)) *PluginLoader_LoadPluginsFromDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PluginLoader_LoadPluginsFromDir_Call) Return(_a0 error) *PluginLoader_LoadPluginsFromDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginLoader_LoadPluginsFromDir_Call) RunAndReturn(run func(string) error) *PluginLoader_LoadPluginsFromDir_Call {
	_c.Call.Return(run)
	return _c
}

// LoadedPlugins provides a mock function with given fields:
func (_m *PluginLoader) LoadedPlugins() []*messages.PluginInfoResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadedPlugins")
	}

	var r0 []*messages.PluginInfoResponse
	if rf, ok := ret.Get(0).(func() []*messages.PluginInfoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*messages.PluginInfoResponse)
		}
	}

	return r0
}

// PluginLoader_LoadedPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadedPlugins'
type PluginLoader_LoadedPlugins_Call struct {
	*mock.Call
}

// LoadedPlugins is a helper method to define mock.On call
func (_e *PluginLoader_Expecter) LoadedPlugins() *PluginLoader_LoadedPlugins_Call {
	return &PluginLoader_LoadedPlugins_Call{Call: _e.mock.On("LoadedPlugins")}
}

func (_c *PluginLoader_LoadedPlugins_Call) Run(run func()) *PluginLoader_LoadedPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginLoader_LoadedPlugins_Call) Return(_a0 []*messages.PluginInfoResponse) *PluginLoader_LoadedPlugins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginLoader_LoadedPlugins_Call) RunAndReturn(run func() []*messages.PluginInfoResponse) *PluginLoader_LoadedPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// PluginForFileExtension provides a mock function with given fields: fileExtension
func (_m *PluginLoader) PluginForFileExtension(fileExtension string) (v1interfaces.LimePipesPlugin, error) {
	ret := _m.Called(fileExtension)

	if len(ret) == 0 {
		panic("no return value specified for PluginForFileExtension")
	}

	var r0 v1interfaces.LimePipesPlugin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (v1interfaces.LimePipesPlugin, error)); ok {
		return rf(fileExtension)
	}
	if rf, ok := ret.Get(0).(func(string) v1interfaces.LimePipesPlugin); ok {
		r0 = rf(fileExtension)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1interfaces.LimePipesPlugin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileExtension)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PluginLoader_PluginForFileExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginForFileExtension'
type PluginLoader_PluginForFileExtension_Call struct {
	*mock.Call
}

// PluginForFileExtension is a helper method to define mock.On call
//   - fileExtension string
func (_e *PluginLoader_Expecter) PluginForFileExtension(fileExtension interface{}) *PluginLoader_PluginForFileExtension_Call {
	return &PluginLoader_PluginForFileExtension_Call{Call: _e.mock.On("PluginForFileExtension", fileExtension)}
}

func (_c *PluginLoader_PluginForFileExtension_Call) Run(run func(fileExtension string)) *PluginLoader_PluginForFileExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PluginLoader_PluginForFileExtension_Call) Return(_a0 v1interfaces.LimePipesPlugin, _a1 error) *PluginLoader_PluginForFileExtension_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PluginLoader_PluginForFileExtension_Call) RunAndReturn(run func(string) (v1interfaces.LimePipesPlugin, error)) *PluginLoader_PluginForFileExtension_Call {
	_c.Call.Return(run)
	return _c
}

// UnloadPlugins provides a mock function with given fields:
func (_m *PluginLoader) UnloadPlugins() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnloadPlugins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PluginLoader_UnloadPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnloadPlugins'
type PluginLoader_UnloadPlugins_Call struct {
	*mock.Call
}

// UnloadPlugins is a helper method to define mock.On call
func (_e *PluginLoader_Expecter) UnloadPlugins() *PluginLoader_UnloadPlugins_Call {
	return &PluginLoader_UnloadPlugins_Call{Call: _e.mock.On("UnloadPlugins")}
}

func (_c *PluginLoader_UnloadPlugins_Call) Run(run func()) *PluginLoader_UnloadPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginLoader_UnloadPlugins_Call) Return(_a0 error) *PluginLoader_UnloadPlugins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginLoader_UnloadPlugins_Call) RunAndReturn(run func() error) *PluginLoader_UnloadPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// NewPluginLoader creates a new instance of PluginLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginLoader {
	mock := &PluginLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
