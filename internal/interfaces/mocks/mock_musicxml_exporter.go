// Code generated by MockGen. DO NOT EDIT.
// Source: musicxml_exporter.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	music_model "banduslib/internal/common/music_model"
	model "banduslib/internal/musicxml/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMusicxmlExporter is a mock of MusicxmlExporter interface.
type MockMusicxmlExporter struct {
	ctrl     *gomock.Controller
	recorder *MockMusicxmlExporterMockRecorder
}

// MockMusicxmlExporterMockRecorder is the mock recorder for MockMusicxmlExporter.
type MockMusicxmlExporterMockRecorder struct {
	mock *MockMusicxmlExporter
}

// NewMockMusicxmlExporter creates a new mock instance.
func NewMockMusicxmlExporter(ctrl *gomock.Controller) *MockMusicxmlExporter {
	mock := &MockMusicxmlExporter{ctrl: ctrl}
	mock.recorder = &MockMusicxmlExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicxmlExporter) EXPECT() *MockMusicxmlExporterMockRecorder {
	return m.recorder
}

// Export mocks base method.
func (m *MockMusicxmlExporter) Export(musicModel music_model.MusicModel) (*model.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", musicModel)
	ret0, _ := ret[0].(*model.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockMusicxmlExporterMockRecorder) Export(musicModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockMusicxmlExporter)(nil).Export), musicModel)
}
