// Code generated by MockGen. DO NOT EDIT.
// Source: bww_file_by_tune_splitter.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	common "github.com/tomvodi/limepipes/internal/common"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBwwFileByTuneSplitter is a mock of BwwFileByTuneSplitter interface.
type MockBwwFileByTuneSplitter struct {
	ctrl     *gomock.Controller
	recorder *MockBwwFileByTuneSplitterMockRecorder
}

// MockBwwFileByTuneSplitterMockRecorder is the mock recorder for MockBwwFileByTuneSplitter.
type MockBwwFileByTuneSplitterMockRecorder struct {
	mock *MockBwwFileByTuneSplitter
}

// NewMockBwwFileByTuneSplitter creates a new mock instance.
func NewMockBwwFileByTuneSplitter(ctrl *gomock.Controller) *MockBwwFileByTuneSplitter {
	mock := &MockBwwFileByTuneSplitter{ctrl: ctrl}
	mock.recorder = &MockBwwFileByTuneSplitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBwwFileByTuneSplitter) EXPECT() *MockBwwFileByTuneSplitterMockRecorder {
	return m.recorder
}

// SplitFileData mocks base method.
func (m *MockBwwFileByTuneSplitter) SplitFileData(data []byte) (*common.BwwFileTuneData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitFileData", data)
	ret0, _ := ret[0].(*common.BwwFileTuneData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitFileData indicates an expected call of SplitFileData.
func (mr *MockBwwFileByTuneSplitterMockRecorder) SplitFileData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitFileData", reflect.TypeOf((*MockBwwFileByTuneSplitter)(nil).SplitFileData), data)
}
